% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/stat-sum.r
\name{stat_sum}
\alias{stat_sum}
\title{Sum unique values.  Useful for overplotting on scatterplots.}
\usage{
stat_sum(mapping = NULL, data = NULL, geom = "point",
  position = "identity", ...)
}
\arguments{
\item{mapping}{The aesthetic mapping, usually constructed with
\code{\link{aes}} or \code{\link{aes_string}}. Only needs to be set
at the layer level if you are overriding the plot defaults.}

\item{data}{A layer specific dataset - only needed if you want to override
the plot defaults.}

\item{geom}{The geometric object to use display the data}

\item{position}{The position adjustment to use for overlappling points
on this layer}

\item{...}{other arguments passed on to \code{\link{layer}}. This can
include aesthetics whose values you want to set, not map. See
\code{\link{layer}} for more details.}
}
\value{
a data.frame with additional columns
 \item{n}{number of observations at position}
 \item{prop}{percent of points in that panel at that position}
}
\description{
Sum unique values.  Useful for overplotting on scatterplots.
}
\section{Aesthetics}{

\Sexpr[results=rd,stage=build]{ggplot2:::rd_aesthetics("stat", "sum")}
}
\examples{
d <- ggplot(diamonds, aes(x = cut, y = clarity))
d + stat_sum()

# Always best to use in conjunction with scale_size_area which ensures
# 0 value is mapped to 0 size
d + stat_sum() +
  scale_size_area()

#' # Can also weight by another variable
d + stat_sum(aes(weight = price)) +
  scale_size_area()

# Or display proportions instead of counts. By default, all categorical
# variables in the plot form the grouping. Specifying stat_sum with no
# group identifier leads to a plot which is not useful:
d + stat_sum(aes(size = ..prop..))
# To correct this problem and achieve a more desirable plot, we need
# to specify which group the proportion is to be calculated over.
d + stat_sum(aes(size = ..prop.., group = 1)) +
  scale_size_area(max_size = 10)

# Or group by x/y variables to have rows/columns sum to 1.
d + stat_sum(aes(size = ..prop.., group = cut)) +
  scale_size_area(max_size = 10)
d + stat_sum(aes(size = ..prop.., group = clarity)) +
  scale_size_area(max_size = 10)
}

