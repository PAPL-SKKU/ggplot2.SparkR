% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/scale-date.r
\name{scale_x_date}
\alias{scale_x_date}
\alias{scale_y_date}
\title{Position scale, date}
\usage{
scale_x_date(..., expand = waiver(), breaks = pretty_breaks(),
  minor_breaks = waiver())

scale_y_date(..., expand = waiver(), breaks = pretty_breaks(),
  minor_breaks = waiver())
}
\arguments{
\item{...}{Additional arguments passed on to \code{\link{continuous_scale}}}

\item{expand}{A numeric vector of length two giving multiplicative and
additive expansion constants. These constants ensure that the data is
placed some distance away from the axes. The defaults are
\code{c(0.05, 0)} for continuous variables, and \code{c(0, 0.6)} for
discrete variables.}

\item{breaks}{A vector of breaks, a function that given the scale limits
returns a vector of breaks, or a character vector, specifying the width
between breaks. For more information about the first two, see
\code{\link{continuous_scale}}, for more information about the last,
see \code{\link[scales]{date_breaks}}`.}

\item{minor_breaks}{Either \code{NULL} for no minor breaks, \code{waiver()}
for the default breaks (one minor break between each major break), a
numeric vector of positions, or a function that given the limits returns
a vector of minor breaks.}
}
\description{
Position scale, date
}
\examples{
# We'll start by creating some nonsense data with dates
df <- data.frame(
  date = seq(Sys.Date(), len=100, by="1 day")[sample(100, 50)],
  price = runif(50)
)
df <- df[order(df$date), ]
dt <- ggplot(df, aes(date, price)) +
      geom_line() +
      theme(aspect.ratio = 1/4)

# We can control the format of the labels, and the frequency of
# the major and minor tickmarks.  See ?format.Date and ?seq.Date
# for more details.
library(scales) # to access breaks/formatting functions
dt + scale_x_date()
dt + scale_x_date(labels = date_format("\%m/\%d"))
dt + scale_x_date(labels = date_format("\%W"))
dt + scale_x_date(labels = date_format("\%W"), breaks = date_breaks("week"))

dt + scale_x_date(breaks = date_breaks("months"),
  labels = date_format("\%b"))
dt + scale_x_date(breaks = date_breaks("4 weeks"),
  labels = date_format("\%d-\%b"))

# We can use character string for breaks.
# See \\code{\\link{by}} argument in \\code{\\link{seq.Date}}.
dt + scale_x_date(breaks = "2 weeks")
dt + scale_x_date(breaks = "1 month", minor_breaks = "1 week")

# The date scale will attempt to pick sensible defaults for
# major and minor tick marks
ggplot(df[1:10,], aes(date, price)) + geom_line()
ggplot(df[1:4,], aes(date, price)) + geom_line()

df <- data.frame(
  date = seq(Sys.Date(), len=1000, by="1 day"),
  price = runif(500)
)
ggplot(df, aes(date, price)) + geom_line()

# A real example using economic time series data
ggplot(economics, aes(date, psavert)) + geom_point()
ggplot(economics, aes(date, psavert)) + geom_path()

end <- max(economics$date)
last_plot() + scale_x_date(limits = c(as.Date("2000-1-1"), end))
last_plot() + scale_x_date(limits = c(as.Date("2005-1-1"), end))
last_plot() + scale_x_date(limits = c(as.Date("2006-1-1"), end))

# If we want to display multiple series, one for each variable
# it's easiest to first change the data from a "wide" to a "long"
# format:
library(reshape2) # for melt
em <- melt(economics, id = "date")

# Then we can group and facet by the new "variable" variable
(p <- ggplot(em, aes(date, value)) + geom_line(aes(group = variable)))
p + facet_grid(variable ~ ., scale = "free_y")
}
\seealso{
Other position scales: \code{\link{scale_x_continuous}},
  \code{\link{scale_x_log10}},
  \code{\link{scale_x_reverse}},
  \code{\link{scale_x_sqrt}},
  \code{\link{scale_y_continuous}},
  \code{\link{scale_y_log10}},
  \code{\link{scale_y_reverse}},
  \code{\link{scale_y_sqrt}};
  \code{\link{scale_x_datetime}},
  \code{\link{scale_y_datetime}};
  \code{\link{scale_x_discrete}},
  \code{\link{scale_y_discrete}}
}

